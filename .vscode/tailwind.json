{
	"version": 1.1,
	"atDirectives": [
		{
			"name": "@custom-variant",
			"description": "The `@custom-variant` directive allows you to define your own custom variants for utilities. This can be useful for creating reusable patterns or extending Tailwind's default variants.",
			"references": [
				{
					"name": "Tailwind Documentation",
					"url": "https://tailwindcss.com/docs/adding-custom-variants"
				}
			]
		},
		{
			"name": "@theme",
			"description": "The `@theme` directive allows you to access your Tailwind theme values directly in your CSS. This is useful for dynamically referencing theme values in custom styles:\n```css\n.alert {\n  color: theme('colors.red.500');\n}\n```",
			"references": [
				{
					"name": "Tailwind Documentation",
					"url": "https://tailwindcss.com/docs/theme-function"
				}
			]
		},
		{
			"name": "@tailwind",
			"description": "Use the `@tailwind` directive to insert Tailwind's `base`, `components`, `utilities` and `screens` styles into your CSS.",
			"references": [
				{
					"name": "Tailwind Documentation",
					"url": "https://tailwindcss.com/docs/functions-and-directives#tailwind"
				}
			]
		},
		{
			"name": "@apply",
			"description": "Use the `@apply` directive to inline any existing utility classes into your own custom CSS. This is useful when you find a common utility pattern in your HTML that you’d like to extract to a new component.",
			"references": [
				{
					"name": "Tailwind Documentation",
					"url": "https://tailwindcss.com/docs/functions-and-directives#apply"
				}
			]
		},
		{
			"name": "@responsive",
			"description": "You can generate responsive variants of your own classes by wrapping their definitions in the `@responsive` directive:\n```css\n@responsive {\n  .alert {\n    background-color: #E53E3E;\n  }\n}\n```\n",
			"references": [
				{
					"name": "Tailwind Documentation",
					"url": "https://tailwindcss.com/docs/functions-and-directives#responsive"
				}
			]
		},
		{
			"name": "@screen",
			"description": "The `@screen` directive allows you to create media queries that reference your breakpoints by **name** instead of duplicating their values in your own CSS:\n```css\n@screen sm {\n  /* ... */\n}\n```\n…gets transformed into this:\n```css\n@media (min-width: 640px) {\n  /* ... */\n}\n```\n",
			"references": [
				{
					"name": "Tailwind Documentation",
					"url": "https://tailwindcss.com/docs/functions-and-directives#screen"
				}
			]
		},
		{
			"name": "@variants",
			"description": "Generate `hover`, `focus`, `active` and other **variants** of your own utilities by wrapping their definitions in the `@variants` directive:\n```css\n@variants hover, focus {\n   .btn-brand {\n    background-color: #3182CE;\n  }\n}\n```\n",
			"references": [
				{
					"name": "Tailwind Documentation",
					"url": "https://tailwindcss.com/docs/functions-and-directives#variants"
				}
			]
		}
	]
}
